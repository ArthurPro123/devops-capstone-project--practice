#
# This pipeline needs the following tasks from Tekton Hub
#   - git-clone
#   - flake8
#
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:  
  name: cd-pipeline
spec:
  workspaces:
    - name: pipeline-workspace
  params:
    - name: repo-url
    - name: branch
      default: main
    - name: build-image

  tasks:
    - name: init
      workspaces:
        - name: source  #  Expects a workspace named "source".
          workspace: pipeline-workspace          
      taskRef:
        name: cleanup


    - name: clone
      workspaces:
        - name: output  # Expects a workspace named "output".
          #
          # The names source and output are task-specific 
          # and only matter within the context of the task.
         
          workspace: pipeline-workspace          
      taskRef:
        name: git-clone
      params:
        - name: url
          value: $(params.repo-url)
        - name: revision
          value: $(params.branch)
      runAfter:
        - init


    - name: lint
      workspaces:
        - name: source
          workspace: pipeline-workspace
      taskRef:
        name: flake8
      params:
        - name: image
          value: "python:3.9-slim"
        - name: args
          value: ["--count", "--max-complexity=10", "--max-line-length=127", "--statistics"]
        - name: path
          value: "service"  # The "service" directory is specified for linting. 
                            # If not specified, flake will also check the "test_service"
                            # directory, which contains many blank lines.
      runAfter:
        - clone


    - name: tests
      workspaces:
        - name: source
          workspace: pipeline-workspace          
      taskRef:
        name: nose
      params:
      - name: database_uri
        value: "sqlite:///test.db"
      - name: args
        value: "-v --with-spec --spec-color"
      runAfter:
        - clone


    - name: build
      workspaces:
        - name: source
          workspace: pipeline-workspace          
      taskRef:
        name: buildah
        kind: ClusterTask
      params:
      - name: IMAGE
        value: "$(params.build-image)"
        
        # The `buildah` task’s spec requires the `IMAGE` parameter
        # to specify the name/tag of the image to build.
        #
        # When it runs, it builds the container and pushes it 
        # to the specified registry.

      runAfter:
        - tests
        - lint


    - name: deploy
      workspaces:
        - name: manifest-dir
          workspace: pipeline-workspace          
      taskRef:
        name: openshift-client
        #
        # The openshift-client task ensures that oc commands are
        # executed in a predefined environment with the correct permissions,
        # credentials, and tools.
        #
        # Running shell scripts directly would require manually setting up a
        # container with the right tools, permissions, and environment
        # variables.
        
        kind: ClusterTask
      params:
      - name: SCRIPT
        value: |
          echo "Restoring original manifest..."
          cp -v deploy/deployment.yaml.template deploy/deployment.yaml

          echo "Updating manifest..."
          
          # Use '|' as a delimiter in sed to avoid conflicts 
          # with colons (:) in the parameter value:
         
          sed -i "s|IMAGE_NAME_HERE|$(params.build-image)|g" deploy/deployment.yaml
          #
          # Replaces IMAGE_NAME_HERE with $(params.build-image), 
          # the same image reference used in the build task.

          cat deploy/deployment.yaml

          echo "Deploying to OpenShift..."
          oc apply -f deploy/

          oc get pods -l app=accounts

      runAfter:
        ## - build
        - clone



    # Playing with the echo task:
    - name: echo-step               # <-- pipeline‑level name
      taskRef:
        name: echo                  # <-- refers to the Task defined in tasks.yaml
      params:
        - name: message
          ### value: "$(params.echo-message)"   # bind pipeline param to task param
          value: "Using BusyBox instead of Alpine for the echo task"   # <-- direct value, no $(params…) indirection
